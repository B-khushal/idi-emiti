"""
Language management utility for Cultural Corpus Collection Platform
Handles language switching, translations, and localization
"""

import streamlit as st
from config import SUPPORTED_LANGUAGES, TRANSLATIONS

def get_current_language():
    """Get the currently selected language from session state"""
    if 'current_language' not in st.session_state:
        st.session_state.current_language = 'en'  # Default to English
    return st.session_state.current_language

def set_language(language_code):
    """Set the current language"""
    if language_code in SUPPORTED_LANGUAGES:
        st.session_state.current_language = language_code
        return True
    return False

def get_text(key, language_code=None):
    """Get translated text for a given key and language"""
    if language_code is None:
        language_code = get_current_language()
    
    # Get translations for the language
    translations = TRANSLATIONS.get(language_code, TRANSLATIONS['en'])
    
    # Return translated text or fallback to English
    return translations.get(key, TRANSLATIONS['en'].get(key, key))

def render_language_selector():
    """Render language selector component"""
    current_lang = get_current_language()
    
    st.sidebar.markdown("### üåê " + get_text('language_selector'))
    
    # Create language options
    language_options = {name: code for code, name in SUPPORTED_LANGUAGES.items()}
    
    selected_language = st.sidebar.selectbox(
        get_text('change_language'),
        options=list(language_options.keys()),
        index=list(language_options.values()).index(current_lang),
        key="language_selector"
    )
    
    # Update language if changed
    if language_options[selected_language] != current_lang:
        set_language(language_options[selected_language])
        st.rerun()

def get_language_name(language_code):
    """Get the display name for a language code"""
    return SUPPORTED_LANGUAGES.get(language_code, 'English')

def get_language_code(language_name):
    """Get the language code for a language name"""
    for code, name in SUPPORTED_LANGUAGES.items():
        if name == language_name:
            return code
    return 'en'

def is_rtl_language(language_code):
    """Check if the language is right-to-left (RTL)"""
    rtl_languages = ['ur', 'ar']  # Urdu, Arabic
    return language_code in rtl_languages

def get_text_direction(language_code=None):
    """Get text direction for the language"""
    if language_code is None:
        language_code = get_current_language()
    
    return 'rtl' if is_rtl_language(language_code) else 'ltr'

def apply_language_styles():
    """Apply language-specific CSS styles"""
    current_lang = get_current_language()
    direction = get_text_direction(current_lang)
    
    css = f"""
    <style>
        /* Language-specific styles */
        .stApp {{
            direction: {direction};
        }}
        
        /* RTL language adjustments */
        {f'''
        .stTextInput > div > div > input {{
            text-align: right;
        }}
        .stTextArea > div > div > textarea {{
            text-align: right;
        }}
        ''' if direction == 'rtl' else ''}
        
        /* Language selector styles */
        .language-selector {{
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 15px;
            padding: 1rem;
            margin: 1rem 0;
        }}
        
        .language-flag {{
            font-size: 1.2rem;
            margin-right: 0.5rem;
        }}
    </style>
    """
    
    st.markdown(css, unsafe_allow_html=True)

def get_language_flag(language_code):
    """Get flag emoji for language"""
    flags = {
        'en': 'üá∫üá∏',
        'hi': 'üáÆüá≥',
        'te': 'üáÆüá≥',
        'ta': 'üáÆüá≥',
        'bn': 'üáÆüá≥',
        'mr': 'üáÆüá≥',
        'gu': 'üáÆüá≥',
        'kn': 'üáÆüá≥',
        'ml': 'üáÆüá≥',
        'pa': 'üáÆüá≥',
        'or': 'üáÆüá≥',
        'as': 'üáÆüá≥',
        'sa': 'üáÆüá≥',
        'ur': 'üáµüá∞'
    }
    return flags.get(language_code, 'üåê')

def render_language_banner():
    """Render a language banner showing current language"""
    current_lang = get_current_language()
    flag = get_language_flag(current_lang)
    language_name = get_language_name(current_lang)
    
    st.markdown(f"""
    <div style="background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px); 
                border: 1px solid rgba(255, 255, 255, 0.2); border-radius: 15px; 
                padding: 0.5rem 1rem; margin: 0.5rem 0; text-align: center;">
        <span style="font-size: 1.2rem;">{flag}</span>
        <span style="margin-left: 0.5rem; font-weight: bold;">{language_name}</span>
    </div>
    """, unsafe_allow_html=True)

def initialize_language_session():
    """Initialize language session state"""
    if 'current_language' not in st.session_state:
        st.session_state.current_language = 'en'
    
    # Apply language-specific styles
    apply_language_styles()

def get_translated_categories():
    """Get categories translated to current language"""
    current_lang = get_current_language()
    
    # Category translations
    category_translations = {
        'en': [
            "Traditional Clothing & Textiles",
            "Musical Instruments",
            "Cooking Utensils & Tools",
            "Religious & Ceremonial Items",
            "Agricultural Tools",
            "Art & Crafts",
            "Jewelry & Accessories",
            "Games & Toys",
            "Architecture & Structures",
            "Food & Beverages",
            "Other"
        ],
        'hi': [
            "‡§™‡§æ‡§∞‡§Ç‡§™‡§∞‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞ ‡§î‡§∞ ‡§µ‡§∏‡•ç‡§§‡•ç‡§∞",
            "‡§∏‡§Ç‡§ó‡•Ä‡§§ ‡§µ‡§æ‡§¶‡•ç‡§Ø‡§Ø‡§Ç‡§§‡•ç‡§∞",
            "‡§ñ‡§æ‡§®‡§æ ‡§™‡§ï‡§æ‡§®‡•á ‡§ï‡•á ‡§¨‡§∞‡•ç‡§§‡§® ‡§î‡§∞ ‡§î‡§ú‡§æ‡§∞",
            "‡§ß‡§æ‡§∞‡•ç‡§Æ‡§ø‡§ï ‡§î‡§∞ ‡§Ö‡§®‡•Å‡§∑‡•ç‡§†‡§æ‡§®‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•Å‡§è‡§Ç",
            "‡§ï‡•É‡§∑‡§ø ‡§â‡§™‡§ï‡§∞‡§£",
            "‡§ï‡§≤‡§æ ‡§î‡§∞ ‡§∂‡§ø‡§≤‡•ç‡§™",
            "‡§Ü‡§≠‡•Ç‡§∑‡§£ ‡§î‡§∞ ‡§∏‡§æ‡§Æ‡§æ‡§®",
            "‡§ñ‡•á‡§≤ ‡§î‡§∞ ‡§ñ‡§ø‡§≤‡•å‡§®‡•á",
            "‡§∏‡•ç‡§•‡§æ‡§™‡§§‡•ç‡§Ø ‡§î‡§∞ ‡§∏‡§Ç‡§∞‡§ö‡§®‡§æ‡§è‡§Ç",
            "‡§≠‡•ã‡§ú‡§® ‡§î‡§∞ ‡§™‡•á‡§Ø",
            "‡§Ö‡§®‡•ç‡§Ø"
        ],
        'te': [
            "‡∞∏‡∞æ‡∞Ç‡∞™‡±ç‡∞∞‡∞¶‡∞æ‡∞Ø ‡∞µ‡∞∏‡±ç‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞µ‡∞∏‡±ç‡∞§‡±ç‡∞∞‡∞æ‡∞≤‡±Å",
            "‡∞∏‡∞Ç‡∞ó‡±Ä‡∞§ ‡∞µ‡∞æ‡∞Ø‡∞ø‡∞¶‡±ç‡∞Ø‡∞æ‡∞≤‡±Å",
            "‡∞µ‡∞Ç‡∞ü ‡∞™‡∞æ‡∞§‡±ç‡∞∞‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞â‡∞™‡∞ï‡∞∞‡∞£‡∞æ‡∞≤‡±Å",
            "‡∞Æ‡∞§ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ü‡∞ö‡∞æ‡∞∞ ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞µ‡±Å‡∞≤‡±Å",
            "‡∞µ‡±ç‡∞Ø‡∞µ‡∞∏‡∞æ‡∞Ø ‡∞â‡∞™‡∞ï‡∞∞‡∞£‡∞æ‡∞≤‡±Å",
            "‡∞ï‡∞≥ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ö‡±á‡∞§‡∞ø ‡∞µ‡±É‡∞§‡±ç‡∞§‡±Å‡∞≤‡±Å",
            "‡∞®‡∞ó‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞Ö‡∞≤‡∞Ç‡∞ï‡∞æ‡∞∞‡∞æ‡∞≤‡±Å",
            "‡∞Ü‡∞ü‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞¨‡±ä‡∞Æ‡±ç‡∞Æ‡∞≤‡±Å",
            "‡∞µ‡∞æ‡∞∏‡±ç‡∞§‡±Å‡∞ï‡∞≥ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞®‡∞ø‡∞∞‡±ç‡∞Æ‡∞æ‡∞£‡∞æ‡∞≤‡±Å",
            "‡∞Ü‡∞π‡∞æ‡∞∞‡∞Ç ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞™‡∞æ‡∞®‡±Ä‡∞Ø‡∞æ‡∞≤‡±Å",
            "‡∞á‡∞§‡∞∞‡∞Æ‡±Å‡∞≤‡±Å"
        ]
    }
    
    return category_translations.get(current_lang, category_translations['en'])

def get_translated_placeholders():
    """Get form placeholders translated to current language"""
    current_lang = get_current_language()
    
    placeholder_translations = {
        'en': {
            'name': 'Enter your name',
            'description': 'Describe the cultural object, its significance, and usage...',
            'user_details': 'Share your cultural background, profession, and location...',
            'latitude': 'Enter latitude (optional)',
            'longitude': 'Enter longitude (optional)',
            'title': 'Enter a title for this cultural object',
            'category': 'Select a category'
        },
        'hi': {
            'name': '‡§Ö‡§™‡§®‡§æ ‡§®‡§æ‡§Æ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
            'description': '‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•Å ‡§ï‡§æ ‡§µ‡§∞‡•ç‡§£‡§® ‡§ï‡§∞‡•á‡§Ç, ‡§á‡§∏‡§ï‡§æ ‡§Æ‡§π‡§§‡•ç‡§µ ‡§î‡§∞ ‡§â‡§™‡§Ø‡•ã‡§ó...',
            'user_details': '‡§Ö‡§™‡§®‡•Ä ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§™‡•É‡§∑‡•ç‡§†‡§≠‡•Ç‡§Æ‡§ø, ‡§™‡•á‡§∂‡§æ ‡§î‡§∞ ‡§∏‡•ç‡§•‡§æ‡§® ‡§∏‡§æ‡§ù‡§æ ‡§ï‡§∞‡•á‡§Ç...',
            'latitude': '‡§Ö‡§ï‡•ç‡§∑‡§æ‡§Ç‡§∂ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)',
            'longitude': '‡§¶‡•á‡§∂‡§æ‡§Ç‡§§‡§∞ ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç (‡§µ‡•à‡§ï‡§≤‡•ç‡§™‡§ø‡§ï)',
            'title': '‡§á‡§∏ ‡§∏‡§æ‡§Ç‡§∏‡•ç‡§ï‡•É‡§§‡§ø‡§ï ‡§µ‡§∏‡•ç‡§§‡•Å ‡§ï‡•á ‡§≤‡§ø‡§è ‡§∂‡•Ä‡§∞‡•ç‡§∑‡§ï ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç',
            'category': '‡§è‡§ï ‡§∂‡•ç‡§∞‡•á‡§£‡•Ä ‡§ö‡•Å‡§®‡•á‡§Ç'
        },
        'te': {
            'name': '‡∞Æ‡±Ä ‡∞™‡±á‡∞∞‡±Å‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
            'description': '‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞µ‡±Å‡∞®‡±Å ‡∞µ‡∞ø‡∞µ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞¶‡∞æ‡∞®‡∞ø ‡∞™‡±ç‡∞∞‡∞æ‡∞Æ‡±Å‡∞ñ‡±ç‡∞Ø‡∞§ ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞â‡∞™‡∞Ø‡±ã‡∞ó‡∞Ç...',
            'user_details': '‡∞Æ‡±Ä ‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞®‡±á‡∞™‡∞•‡±ç‡∞Ø‡∞Ç, ‡∞µ‡±É‡∞§‡±ç‡∞§‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞™‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø...',
            'latitude': '‡∞Ö‡∞ï‡±ç‡∞∑‡∞æ‡∞Ç‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)',
            'longitude': '‡∞∞‡±á‡∞ñ‡∞æ‡∞Ç‡∞∂‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø (‡∞ê‡∞ö‡±ç‡∞õ‡∞ø‡∞ï‡∞Ç)',
            'title': '‡∞à ‡∞∏‡∞æ‡∞Ç‡∞∏‡±ç‡∞ï‡±É‡∞§‡∞ø‡∞ï ‡∞µ‡∞∏‡±ç‡∞§‡±Å‡∞µ‡±Å‡∞ï‡±Å ‡∞∂‡±Ä‡∞∞‡±ç‡∞∑‡∞ø‡∞ï‡∞®‡±Å ‡∞®‡∞Æ‡±ã‡∞¶‡±Å ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø',
            'category': '‡∞í‡∞ï ‡∞µ‡∞∞‡±ç‡∞ó‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞Ç‡∞ö‡±Å‡∞ï‡±ã‡∞Ç‡∞°‡∞ø'
        }
    }
    
    return placeholder_translations.get(current_lang, placeholder_translations['en']) 